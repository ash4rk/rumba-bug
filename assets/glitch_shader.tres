[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

//2D (returns 0 - 1)
float random2d(vec2 n) { 
    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float randomRange (in vec2 seed, in float min, in float max) {
		return min + random2d(seed) * (max - min);
}

// return 1 if v inside 1d range
float insideRange(float v, float bottom, float top) {
   return step(bottom, v) - step(top, v);
}

//inputs
uniform float AMT = 0.0; //0 - 1 glitch amount
uniform float SPEED = 0.6; //0 - 1 speed
   
void fragment()
{
    
    float time = floor(TIME * SPEED * 60.0);    
	vec2 uv = SCREEN_UV;
    
    //copy orig
    vec3 outCol = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
    
    //randomly offset slices horizontally
    float maxOffset = AMT/2.0;
    
    //do slight offset checked one entire channel
    float maxColOffset = AMT/6.0;
    float rnd = random2d(vec2(time , 9545.0));
    vec2 colOffset = vec2(randomRange(vec2(time , 9545.0),-maxColOffset,maxColOffset), 
                       randomRange(vec2(time , 7205.0),-maxColOffset,maxColOffset));
    if (rnd < 0.33){
        outCol.r = texture(SCREEN_TEXTURE, SCREEN_UV + colOffset).r;
        
    }else if (rnd < 0.66){
        outCol.g = texture(SCREEN_TEXTURE, SCREEN_UV + colOffset).g;
        
    } else{
        outCol.b = texture(SCREEN_TEXTURE, SCREEN_UV + colOffset).b;  
    }
       
	COLOR = vec4(outCol,1.0);
}"
